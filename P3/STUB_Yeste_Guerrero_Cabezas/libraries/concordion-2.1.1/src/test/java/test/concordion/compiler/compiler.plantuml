@startuml

title __COMPILER's Class Diagram__\n

  package test.concordion {
    package test.concordion.compiler {
      class CompilationFailedException {
          {static} - serialVersionUID : long
          - diagnostics : DiagnosticMessage[]
          + CompilationFailedException()
          + getDiagnosticMessages()
          + printDiagnosticsTo()
      }
    }
  }
  

  package test.concordion {
    package test.concordion.compiler {
      interface Compiler {
          {abstract} + compile()
      }
    }
  }
  

  package test.concordion {
    package test.concordion.compiler {
      class CompilerNotAvailableException {
          {static} - serialVersionUID : long
          + CompilerNotAvailableException()
      }
    }
  }
  

  package test.concordion {
    package test.concordion.compiler {
      class DiagnosticCollector {
          - diagnosticMessages : List<DiagnosticMessage>
          - locale : Locale
          + report()
          + getDiagnosticMessages()
      }
    }
  }
  

  package test.concordion {
    package test.concordion.compiler {
      interface DiagnosticMessage {
          {abstract} + getMessage()
      }
    }
  }
  

  package test.concordion {
    package test.concordion.compiler {
      class JavaCompiler {
          - systemJavaCompiler : JavaCompiler
          - locale : Locale
          - charset : Charset
          + JavaCompiler()
          + compile()
          - getStandardFileManager()
          + forName()
      }
    }
  }
  

  package test.concordion {
    package test.concordion.compiler {
      class SimulatedClassLoader {
          + SimulatedClassLoader()
          # findClass()
      }
    }
  }
  

  package test.concordion {
    package test.concordion.compiler {
      class SimulatedFileManager {
          - classFileMap : Map<String, SimulatedJavaClassFile>
          + SimulatedFileManager()
          + getJavaFileForOutput()
          + inferBinaryName()
          + list()
      }
    }
  }
  

  package test.concordion {
    package test.concordion.compiler {
      class SimulatedJavaClassFile {
          - out : ByteArrayOutputStream
          + SimulatedJavaClassFile()
          + openInputStream()
          + openOutputStream()
          + getBytes()
      }
    }
  }
  

  package test.concordion {
    package test.concordion.compiler {
      class SimulatedJavaSourceFile {
          - content : String
          ~ SimulatedJavaSourceFile()
          + getCharContent()
      }
    }
  }
  

  package test.concordion {
    package test.concordion.compiler {
      class Source {
          - content : String
          - path : URI
          + Source()
          + Source()
          + getContent()
          + getPath()
          {static} + toURI()
      }
    }
  }
  

  DiagnosticCollector -up-|> DiagnosticListener
  JavaCompiler -up-|> Compiler
  JavaCompiler o-- DiagnosticCollector : diagnosticCollector
  JavaCompiler o-- SimulatedFileManager : simulatedFileManager
  JavaCompiler o-- SimulatedClassLoader : simulatedClassLoader
  SimulatedClassLoader o-- SimulatedFileManager : simulatedFileManager
  SimulatedFileManager -up-|> ForwardingJavaFileManager
  SimulatedJavaClassFile -up-|> SimpleJavaFileObject
  SimulatedJavaSourceFile -up-|> SimpleJavaFileObject


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
