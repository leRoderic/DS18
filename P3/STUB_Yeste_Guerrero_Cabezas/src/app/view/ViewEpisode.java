package app.view;

import java.awt.*;
import java.awt.event.*;
import app.controller.Controller;
import app.model.Episode;
import app.model.User;
import java.awt.event.ActionListener;
import javax.swing.*;

public class ViewEpisode extends JFrame {

    private Timer t;
    private ActionListener al;
    private Controller controller;
    private StUB parent;
    private Episode episode;
    private User user;

    /**
     * Creates new form ViewEpisode
     */
    public ViewEpisode(StUB parent, Episode ep, User user) {
        this.controller = Controller.getInstance();
        this.parent = parent;
        this.episode = ep;
        this.user = user;
        initComponents();
        initText();
        getContentPane().setBackground(new Color(153, 204, 255));
        setVisible(true);
        al = e -> {
            bWaitTime.setString(String.valueOf(bWaitTime.getValue()));
            if(bWaitTime.getValue() > 0){
                bWaitTime.setString(String.valueOf(bWaitTime.getValue() - 1));
                bWaitTime.setValue(bWaitTime.getValue() - 1);
            }else{
                t.stop();
                bWaitTime.setVisible(false);
                btRate.setEnabled(true);
                btRate.setToolTipText("Valorar el episodio.");
            }
        };
        t = new Timer(1000, al);
    }

    /**
     * Creates Rate form.
     *
     * @param e event
     */
    private void btRateActionPerformed(ActionEvent e) {
        RateEpisode rate = new RateEpisode(this, episode);
        btRate.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - sasdfgty
    private void initComponents() {
        txtTitleEpisode = new JLabel();
        jScrollPane1 = new JScrollPane();
        txtDescription = new JTextArea();
        btSubscribe = new JButton();
        btView = new JButton();
        btRate = new JButton();
        bWaitTime = new JProgressBar();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("StUB - Reproductor");
        Container contentPane = getContentPane();

        //---- txtTitleEpisode ----
        txtTitleEpisode.setFont(new Font("Dialog", Font.BOLD, 18));
        txtTitleEpisode.setText("Titulo episodio");

        //======== jScrollPane1 ========
        {

            //---- txtDescription ----
            txtDescription.setColumns(7);
            txtDescription.setFont(new Font("Dialog", txtDescription.getFont().getStyle() | Font.BOLD, 16));
            txtDescription.setRows(5);
            txtDescription.setEditable(false);
            txtDescription.setBackground(new Color(51, 153, 255));
            txtDescription.setLineWrap(true);
            txtDescription.setWrapStyleWord(true);
            jScrollPane1.setViewportView(txtDescription);
        }

        //---- btSubscribe ----
        btSubscribe.setFont(new Font("Dialog", Font.BOLD, 16));
        btSubscribe.setText("Suscribirme");
        btSubscribe.setToolTipText("Suscripci\u00f3n al episodio.");
        btSubscribe.addActionListener(e -> btSubscribeActionPerformed(e));

        //---- btView ----
        btView.setFont(new Font("Dialog", Font.BOLD, 16));
        btView.setText("Ver");
        btView.setToolTipText("Ver el episodio.");
        btView.addActionListener(e -> {
			btViewActionPerformed(e);
			btViewActionPerformed(e);
		});

        //---- btRate ----
        btRate.setFont(new Font("Dialog", Font.BOLD, 16));
        btRate.setText("Valorar");
        btRate.setEnabled(false);
        btRate.setToolTipText("Tienes que haber visto el episodio para poder valorarlo.");
        btRate.addActionListener(e -> btRateActionPerformed(e));

        //---- bWaitTime ----
        bWaitTime.setFont(new Font("Dialog", Font.BOLD, 16));
        bWaitTime.setForeground(Color.blue);
        bWaitTime.setValue(5);
        bWaitTime.setMaximum(5);
        bWaitTime.setBackground(Color.black);
        bWaitTime.setStringPainted(true);
        bWaitTime.setString("  ");
        bWaitTime.setBorderPainted(false);
        bWaitTime.setVisible(false);

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(contentPaneLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(bWaitTime, GroupLayout.PREFERRED_SIZE, 373, GroupLayout.PREFERRED_SIZE))
                            .addGroup(GroupLayout.Alignment.LEADING, contentPaneLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(contentPaneLayout.createParallelGroup()
                                    .addComponent(txtTitleEpisode)
                                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 373, GroupLayout.PREFERRED_SIZE))))
                        .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(btSubscribe, GroupLayout.PREFERRED_SIZE, 128, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btView, GroupLayout.PREFERRED_SIZE, 107, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btRate, GroupLayout.PREFERRED_SIZE, 114, GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(33, Short.MAX_VALUE))
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addGap(17, 17, 17)
                    .addComponent(txtTitleEpisode)
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 143, GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(bWaitTime, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(btRate, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                        .addComponent(btView, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                        .addComponent(btSubscribe, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE))
                    .addGap(31, 31, 31))
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Getter for user.
     *
     * @return user
     */
    public User getUser(){
        return this.user;
    }

    /**
     * Initializes episode's title and description.
     *
     */
    private void initText(){
        this.txtTitleEpisode.setText(episode.getTitle());
        this.txtDescription.setText(episode.getDescription());
    }

    /**
     * Subscribes user to series.
     *
     * @param evt event
     */
    private void btSubscribeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSubscribeActionPerformed
        boolean tmp = controller.subscribeToEpisode(episode.getTitle(), episode.getIdSerie(), episode.getSeasonNumber(), parent.getUser().getId());
        btSubscribe.setText("Suscrito");
        btSubscribe.setEnabled(false);
    }//GEN-LAST:event_btSubscribeActionPerformed

    /**
     * Plays the episode.
     *
     * @param evt event
     */
    private void btViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btViewActionPerformed
        if(!t.isRunning() && bWaitTime.getValue() != 0){
            bWaitTime.setString(String.valueOf(bWaitTime.getValue()));
            bWaitTime.setVisible(true);
            t.start();
        }
        controller.viewEpisode(episode.getTitle(), episode.getIdSerie(), String.valueOf(episode.getSeasonNumber()), parent.getUser().getId());
    }//GEN-LAST:event_btViewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - sasdfgty
    private JLabel txtTitleEpisode;
    private JScrollPane jScrollPane1;
    private JTextArea txtDescription;
    private JButton btSubscribe;
    private JButton btView;
    private JButton btRate;
    private JProgressBar bWaitTime;
    // End of variables declaration//GEN-END:variables
}
