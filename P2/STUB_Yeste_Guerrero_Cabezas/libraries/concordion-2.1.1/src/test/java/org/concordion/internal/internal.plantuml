@startuml

title __INTERNAL's Class Diagram__\n

  package org.concordion {
    package org.concordion.internal {
      class BrowserStyleWhitespaceComparatorTest {
          - comparator : BrowserStyleWhitespaceComparator
          + normalizesItemsBeforeComparing()
          + considersAStringRepresentationOfNullAsEqualToNull()
          + acceptsVariousFormsOfBooleanString()
          - assertConsideredEqual()
          - assertNotConsideredEqual()
      }
    }
  }
  

  package org.concordion {
    package org.concordion.internal {
      class ClassNameBasedSpecificationLocatorTest {
          + testRemovesWordTestFromEndOfClassNameAndAppendsDotHTML()
          + testRemovesWordFixtureFromEndOfClassNameAndAppendsDotHTML()
          + testCanAppendDotXHTMLWhenConstructedWithXHTMLArgument()
      }
    }
  }
  

  package org.concordion {
    package org.concordion.internal {
      class ClassPathSourceTest {
          {static} - EXPECTED_SOURCE_NAME : String
          {static} - MISSING_RESOURCE_NAME : String
          - source : ClassPathSource
          + failsWithIOExceptionOnCreateInputStreamWithMissingResource()
      }
    }
  }
  

  package org.concordion {
    package org.concordion.internal {
      class FixtureExtensionLoaderWithAnnotatedFieldsTest {
          - compiler : JavaSourceCompiler
          - loader : FixtureExtensionLoader
          + loadsPublicFieldWithExtensionAnnotation()
          + loadsPublicFieldFromSuperClassWithExtensionAnnotation()
          + ignoresFieldsWithoutExtensionAnnotation()
          + allowsPrivateFieldWithExtensionAnnotation()
          + allowsProtectedFieldWithExtensionAnnotation()
          + allowsPackageAccessibleFieldWithExtensionAnnotation()
          + errorsIfFieldWithExtensionAnnotationIsNull()
          + errorsIfFieldWithExtensionAnnotationIsNotAConcordionExtension()
          - withFieldDeclaration()
          - withFieldDeclaration()
          - classWithFieldDeclaration()
      }
    }
  }
  

  package org.concordion {
    package org.concordion.internal {
      class FixtureExtensionLoaderWithClassAnnotationTest {
          - compiler : JavaSourceCompiler
          - loader : FixtureExtensionLoader
          + loadsExtensionListedInClassAnnotation()
          + errorsIfExtensionConstructorIsNotPublic()
          + errorsIfExtensionDoesNotHaveNoArgsConstructor()
          + loadsExtensionFromFactoriesListedInClassAnnotation()
          + errorsIfClassIsNotExtensionOrExtensionFactory()
          + onlyLoadsExtensionOnceIfParentIsAnnotated()
          + loadsAllExtensionsInHierarchy()
          - withClassAnnotation()
          - createParentWithClassAnnotation()
          - withClassAnnotationAndSuperclass()
          - classWithAnnotation()
      }
    }
  }
  

  package org.concordion {
    package org.concordion.internal {
      class MultiPatternTest {
          - testingInstance : MultiPattern
          + testMatchesFirstRegex()
          + testMatchesSecondRegex()
          + testDoesNotMatch()
      }
    }
  }
  

  package org.concordion {
    package org.concordion.internal {
      class SingleParameterSupplierTest {
          ~ singleParameterSupplier : SingleParameterSupplier
          + returnsParameterWhenAnnotatedCorrectly()
          + validMethod()
          + throwsExceptionWhenParameterTypeIsIncorrect()
          + incorrectParamType()
          + throwsExceptionWhenParameterHasNoAnnotations()
          + parameterWithNoAnnotations()
          + throwsExceptionWhenParameterHasMultipleAnnotations()
          + parameterWithMultipleAnnotations()
      }
    }
  }
  

  package org.concordion {
    package org.concordion.internal {
      class XMLSpecificationReaderTest {
          {static} - EXPECTED_SOURCE_NAME : String
          {static} - SPEC_RESOURCE_NAME : String
          {static} - ERRONEOUS_HTML : String
          - stubSource : StubSource
          - reader : XMLSpecificationReader
          + includesSourceAndResourceNameOnFailure()
      }
    }
  }
  



right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
